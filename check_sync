#!/usr/local/bin/python3

"""check_sync
   See if a given mvol identifier is "in sync" between the XTF development or
   production servers and the owncloud source files. "In sync" means that the
   files on the XTF server have the same datestamps or newer than those stored
   in owncloud. 
 
   Usage:
   check_sync (--owncloud-to-development | --owncloud-to-production) (--list-in-sync | --list-out-of-sync) <identifier> ...
"""

from docopt import docopt
import operator
import os
import paramiko
import stat
import sys


def get_path_owncloud(identifier):
    """Return a path for a given identifier on owncloud's filesystem.

       Arguments:
       identifier -- e.g. 'mvol-0001-0002-0003'

       Returns:
       A string, the path to this file on owncloud's filesystem. Note that you
       should use these paths for read access only.
    """

    return '/data/voldemort/digital_collections/data/ldr_oc_admin/files/IIIF_Files/{}'.format(identifier.replace('-', '/'))

def get_path_xtf_development(identifier):
    """Return a path for a given identifier on the XTF development server's filesystem.

       Arguments:
       identifier -- e.g. 'mvol-0001-0002-0003'

       Returns:
       A string, the path to this file on XTF's filesystem.
    """

    return '/usr/local/apache-tomcat-6.0/webapps/xtf/data/bookreader/{}'.format(identifier)

def get_path_xtf_production(identifier):
    """Return a path for a given identifier on the XTF production server's filesystem.

       Arguments:
       identifier -- e.g. 'mvol-0001-0002-0003'

       Returns:
       A string, the path to this file on XTF's filesystem.
    """

    return '/usr/local/apache-tomcat-6.0/webapps/campub/data/bookreader/{}'.format(identifier)

def get_newest_modification_time_from_directory(ftp, directory):
    """ Helper function for get_newest_modification_time. 
        Recursively searches subdirectories for the newest modification time. 
     
        Arguments:
           ftp       -- paramiko ftp instance
	   directory -- path to an identifier's files on disk, on either
                        owncloud or one of the XTF servers.

        Returns:
           The newest unix timestamp present in that directory.
    """

    mtimes = []
    for entry in ftp.listdir_attr(directory):
        if stat.S_ISDIR(entry.st_mode):
            mtime = get_newest_modification_time_from_directory(ftp, '{}/{}'.format(directory, entry.filename))
        else:
            try:
                mtimes.append(entry.st_mtime)
            except FileNotFoundError:
                sys.stderr.write(directory + '\n')
                raise FileNotFoundError

    if mtimes:
        return max(mtimes)
    else:
        return 0

def get_newest_modification_time(ftp, path_function, identifier):
    """Get the most recent modification time for the files associated with a given identifier. 
 
       Arguments:
           ftp           -- paramiko ftp instance
	   path_function -- one of get_path_owncloud, get_path_xtf_development,
                            get_path_xtf_production
           identifier    -- e.g. 'mvol-0001-0002-0003'

        Returns:
           The newest unix timestamp present in that directory.
    """

    return get_newest_modification_time_from_directory(ftp, path_function(identifier))


if __name__ == '__main__':
    args = docopt(__doc__)

    owncloud_ssh = paramiko.SSHClient()
    owncloud_ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    owncloud_ssh.connect(
      os.environ['OWNCLOUD_SSH_SERVER'],
      username=os.environ['OWNCLOUD_SSH_USERNAME'],
      password=os.environ['OWNCLOUD_SSH_PASSWORD']
    )
    owncloud_ftp = owncloud_ssh.open_sftp()

    xtf_ssh = paramiko.SSHClient()
    xtf_ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    if args['--owncloud-to-development']:
        xtf_ssh.connect(
            os.environ['XTF_DEVELOPMENT_SERVER'],
            username=os.environ['XTF_DEVELOPMENT_USERNAME'],
            password=os.environ['XTF_DEVELOPMENT_PASSWORD']
        )
        xtf_path_function = get_path_xtf_development
    elif args['--owncloud-to-production']:
        xtf_ssh.connect(
            os.environ['XTF_PRODUCTION_SERVER'],
            username=os.environ['XTF_PRODUCTION_USERNAME'],
            password=os.environ['XTF_PRODUCTION_PASSWORD']
        )
        xtf_path_function = get_path_xtf_production
    else:
        raise NotImplementedError
    xtf_ftp = xtf_ssh.open_sftp()

    if args['--list-in-sync']:
        comparison = operator.lt
    elif args['--list-out-of-sync']:
        comparison = operator.gt
    else:
        raise NotImplementedError

    for identifier in args['<identifier>']:
        try:
            if comparison(
                get_newest_modification_time(owncloud_ftp, get_path_owncloud, identifier),
                get_newest_modification_time(xtf_ftp, xtf_path_function, identifier)
            ):
                print(identifier)
        except FileNotFoundError:
            if args['--list-out-of-sync']: 
                print(identifier)
