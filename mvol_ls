#!/usr/local/bin/python3

"""mvol_ls
   List mvols that match certain patterns, e.g.:
      'mvol' 
      'mvol-0001'
      'mvol-0001-0002'
      'mvol-0001-0002-0003'
 
   Usage:
   mvol_ls <identifier-chunk>
"""

from docopt import docopt
import os
import paramiko
import re
import sys


def is_identifier(identifier_chunk):
  """Return true if this identifier chunk is a complete identifier. 

     Arguments:
     identifier chunk -- e.g., 'mvol', 'mvol-0001', 'mvol-0001-0002',
                         'mvol-0001-0002-0003'

     Returns:
     True or False
  """
  
  return re.match('^mvol-\d{4}-\d{4}-\d{4}$', identifier_chunk)


def get_path(identifier_chunk):
  """Return the path to a given identifier chunk on owncloud's disk space.
     N.B., you should use these paths for read-only access.

     Arguments:
     identifier chunk -- e.g., 'mvol', 'mvol-0001', 'mvol-0001-0002',
                         'mvol-0001-0002-0003'

     Returns:
     A string, the path to an identifier chunk on disk. 
  """

  return '/data/voldemort/digital_collections/data/ldr_oc_admin/files/IIIF_Files/{}'.format(identifier_chunk.replace('-', '/'))


def recursive_ls(ftp, identifier_chunk):
  """Get a list of identifiers in on disk. 

     Arguments:
     ftp              -- an sftp connection from Paramiko.
     identifier chunk -- e.g., 'mvol', 'mvol-0001', 'mvol-0001-0002',
                         'mvol-0001-0002-0003'

     Returns:
     A list of identifiers, e.g. 'mvol-0001-0002-0003'
  """

  if is_identifier(identifier_chunk):
    return [identifier_chunk]
  else:
    identifiers = []
    for entry in ftp.listdir(get_path(identifier_chunk)):
      if re.match('^\d{4}$', entry):
        identifiers = identifiers + recursive_ls(ftp, '{}-{}'.format(identifier_chunk, entry))
    return identifiers

if __name__ == '__main__':
  arguments = docopt(__doc__)
  identifier_chunk = arguments['<identifier-chunk>']

  server = os.environ['OWNCLOUD_SSH_SERVER']
  username = os.environ['OWNCLOUD_SSH_USERNAME']
  password = os.environ['OWNCLOUD_SSH_PASSWORD']

  ssh = paramiko.SSHClient()
  ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
  ssh.connect(server, username=username, password=password)
  ftp = ssh.open_sftp()

  identifiers = recursive_ls(ftp, identifier_chunk)
  identifiers.sort()
  for identifier in identifiers:
    sys.stdout.write(identifier + '\n')

