#!/usr/bin/env python3

"""Usage:
   mvol check_sync (--owncloud-to-development | --owncloud-to-production) (--list-in-sync | --list-out-of-sync) <identifier-chunk> ...
   mvol csvreport <identifier-chunk> ...
   mvol ls [--local-root=<path>] [--clean] <identifier-chunk> ...
   mvol validate (--list-valid|--show-errors) [--local-root=<path>] [--clean] <identifier-chunk> ...
"""

import datetime
import operator
import os
import sqlite3
import sys
from classes import MvolValidator, XTFValidator
from docopt import docopt


if __name__ == '__main__':
    arguments = docopt(__doc__)

    conn = sqlite3.connect('/data/s4/jej/validation.db')
    c = conn.cursor()
    mvol_valid = MvolValidator()

    if arguments['--local-root']:
        mvol_valid.set_local_root(arguments['--local-root'])

    if any((arguments['check_sync'],)):
        if arguments['--owncloud-to-development']:
            xtf_ssh = XTFvalidator(False)
            xtf_ssh.connect(os.environ['XTF_DEVELOPMENT_SERVER'], {})
        elif arguments['--owncloud-to-production']:
            xtf_ssh = XTFValidator(True)
            xtf_ssh.connect(os.environ['XTF_PRODUCTION_SERVER'], {})

    # pull identifiers from database by default. if the user selects a
    # clean ls, then rebuild the appropriate parts of the table.
    identifiers = set()
    for identifier_chunk in arguments['<identifier-chunk>']:
        c.execute(
            'SELECT identifier FROM validation WHERE identifier LIKE ?',
            ('{}%'.format(identifier_chunk),)
        )
    for r in c.fetchall():
        identifiers.add(r[0])
    
    if arguments['check_sync']:
        if arguments['--list-in-sync']:
            comparison = operator.le
        elif arguments['--list-out-of-sync']:
            comparison = operator.gt
        for identifier in identifiers:
            try:
                if comparison(
                    mvol_valid.get_newest_modification_time(identifier),
                    xtf_ssh.get_newest_modification_time(identifier)
                ):
                    sys.stdout.write(identifier + '\n')
            except FileNotFoundError:
                if arguments['--list-out-of-sync']: 
                    sys.stdout.write(identifier + '\n')
      
    elif arguments['csvreport']:
        # get a set of identifier_years, e.g. mvol-0004-1951.
        identifier_years = set()
        for i in identifiers:
            if not i.startswith('mvol'):
                raise NotImplementedError
            identifier_years.add('-'.join(i.split('-')[:3]))

        csv_data = {}
        for i in identifier_years:
            csv_data = {**csv_data, **mvol_valid.get_csv_data(i)}

        csv_mvols = set(csv_data.keys())
        owncloud_mvols = set(identifiers)

        csv_only = csv_mvols - owncloud_mvols
        if csv_only:
            sys.stdout.write('The following mvols are present in CSV data but not in Owncloud:\n')
            sys.stdout.write('\n'.join(sorted(csv_only)) + '\n')
        owncloud_only = owncloud_mvols - csv_mvols
        if owncloud_only:
            sys.stdout.write('The following mvols are present in Owncloud but not in CSV data:\n')
            sys.stdout.write('\n'.join(sorted(owncloud_only)) + '\n')
    elif arguments['ls']:
        if arguments['--clean']:
            # get identifiers from disk.
            identifiers = set()
            for identifier_chunk in arguments['<identifier-chunk>']:
                for i in mvol_valid.recursive_ls(identifier_chunk):
                    if i.startswith('mvol'):
                        identifiers.add(i)
            identifiers = sorted(list(identifiers))

            # delete identifiers from db, if present.
            for identifier_chunk in arguments['<identifier-chunk>']:
                c.execute(
                    'DELETE FROM validation WHERE identifier LIKE ?',
                    ('{}%'.format(identifier_chunk),)
                )
                conn.commit()

            # load new identifiers into db.
            for identifier in identifiers:
                c.execute(
                    'INSERT INTO validation (identifier, identifier_date, validation, validation_date, validation_errors) VALUES (?, ?, ?, ?, ?)',
                    (
                        identifier,
                        datetime.datetime.now().isoformat(),
                        0,
                        '',
                        ''
                    )
                )
            conn.commit()

        # print identifiers
        for identifier in identifiers:
            sys.stdout.write(identifier + '\n')
    elif arguments['validate']:
        if arguments['--clean']:
            for identifier in identifiers:
                errors = mvol_valid.validate(identifier)
                validation = not(bool(errors))
                c.execute(
                    'UPDATE validation SET validation = ?, validation_date = ?, validation_errors = ? WHERE identifier = ?',
                    (
                        validation,
                        datetime.datetime.now().isoformat(),
                        ''.join(errors),
                        identifier,
                    )
                )
            conn.commit()
        for identifier_chunk in arguments['<identifier-chunk>']:
            if arguments['--show-errors']:
                c.execute(
                    'SELECT validation_errors FROM validation WHERE identifier LIKE ? AND validation = 0',
                    ('{}%'.format(identifier_chunk),)
                )
                for r in c.fetchall():
                    print(r[0])
            elif arguments['--list-valid']:
                c.execute(
                    'SELECT identifier FROM validation WHERE identifier LIKE ? AND validation = 1',
                    ('{}%'.format(identifier_chunk),)
                )
                for r in c.fetchall():
                    sys.stdout.write(r[0])
