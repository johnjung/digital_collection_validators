#!/usr/bin/env python3

"""Usage:
   apf ls <identifier-chunk> ...
   apf validate (--list-valid | --show-errors) <identifier-chunk> ...
"""

import os
import sys
from classes import ApfOwnCloudSSH
from docopt import docopt


if __name__ == '__main__':
    arguments = docopt(__doc__)

    apf_owncloud_ssh = ApfOwnCloudSSH()
    apf_owncloud_ssh.connect(os.environ['OWNCLOUD_SSH_SERVER'], {})

    # build a set of identifiers (e.g. 'apf1-00001', 'apf1-00002', etc.) from
    # the identifier chunks (e.g. 'apf1', 'apf2', etc.) that were passed in on
    # the command line.
    #
    # examples:
    # apf ls apf1
    # apf ls apf1 apf2 apf3
    #
    # (look at the mvol command in this directory for an example of how to do
    # this. Look at the recursive_ls function in OwnCloudSSH, in classes.py. 
    # This should work with mvol files. Does this "just work" with apf, or does
    # it need to be extended?)
    identifiers = set() #set --> ensures no repeating elements
    for identifier_chunk in arguments['<identifier-chunk>']:
        for i in apf_owncloud_ssh.recursive_ls(identifer_chunk):
            if i.startswith('apf'):
                identifiers.add(i)
    identifiers = sorted(list(identifiers))

    if arguments['ls']:
        for identifier in identifiers:
            sys.stdout.write(identifier + '\n')
    elif arguments['validate']:
        for identifier in identifiers:
            errors = apf_owncloud_ssh.validate(identifier)
            if arguments['--show-errors']:
                for error in errors:
                    sys.stdout.write(error)
            elif arguments['--list-valid']:
                if not errors:
                    sys.stdout.write('{}\n'.format(identifier))
