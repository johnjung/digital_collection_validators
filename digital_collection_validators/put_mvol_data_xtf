#!/usr/bin/env python3

"""Usage:
   put_mvol_data_xtf (--development|--production) --local-root=<local-root> --min-year=<min-year> --max-year=<max-year> <identifier> ...
"""

from docopt import docopt
from PIL import Image
import getpass
import io
import os
import paramiko
import re
import requests
import subprocess
import statistics
import sys


if __name__ == '__main__':
    arguments = docopt(__doc__)

    xtf_ssh = paramiko.SSHClient()
    xtf_ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    if arguments['--development']:
        xtf_ssh.connect(
            os.environ['XTF_DEVELOPMENT_SERVER'],
            username=os.environ['XTF_DEVELOPMENT_USERNAME'],
            password=os.environ['XTF_DEVELOPMENT_PASSWORD']
        )
        xtf_path = '/usr/local/apache-tomcat-6.0/webapps/xtf/data/bookreader'
    elif arguments['--production']:
        xtf_ssh.connect(
            os.environ['XTF_PRODUCTION_SERVER'],
            username=os.environ['XTF_PRODUCTION_USERNAME'],
            password=os.environ['XTF_PRODUCTION_PASSWORD']
        )
        xtf_path = '/usr/local/apache-tomcat-6.0/webapps/campub/data/bookreader'
    else:
        sys.stdout.write('unknown server, must be development or production.\n')
        sys.exit()
    xtf_ftp = xtf_ssh.open_sftp()

    for identifier in arguments['<identifier>']:

        if identifier in xtf_ftp.listdir(xtf_path):
            sys.stderr.write(identifier + ' directory exists.')
            sys.exit()

        xtf_ftp.mkdir('{}/{}'.format(xtf_path, identifier), mode=0o755)
    
        img_dir = arguments['--local-root'] + '/' + '/'.join(identifier.split('-')) + '/' + 'JPEG'
        imgs= []
        for img in os.listdir(img_dir):
            imgs.append(img_dir + '/' + img)
        imgs.sort()
    
        if identifier.startswith('mvol-0004'):
            size = (6800, 6800)
        else:
            size = (1024, 1024)
    
        sizes = []
        i = 1
        for img in imgs:
            in_memory_out = io.BytesIO()
            im = Image.open(img)
            im.thumbnail(size)
            sizes.append(im.size)
            im.save(in_memory_out, format='JPEG')
            in_memory_out.seek(0)
            xtf_ftp.putfo(in_memory_out, '{}/{}/{}.jpg'.format(xtf_path, identifier, str(i).zfill(8)))
    
            if i == 1:
                in_memory_out = io.BytesIO()
                im = Image.open(img)
                im.thumbnail((100, 100))
                im.save(in_memory_out, format='JPEG')
                in_memory_out.seek(0)
                xtf_ftp.putfo(in_memory_out, '{}/{}/{}.jpg'.format(xtf_path, identifier, identifier))
            i = i + 1
    
        width = int(statistics.median([s[0] for s in sizes]))
        height = int(statistics.median([s[1] for s in sizes]))

        ocr_text = subprocess.check_output([
            'python',
            '/data/s4/jej/ocr_converters/build_ia_bookreader_ocr.py',
            '--local-root={}'.format(arguments['--local-root']),
            identifier,
            arguments['--min-year'],
            arguments['--max-year']
        ]).decode('utf-8')

        in_memory_ocr = io.StringIO()
        in_memory_ocr.write(ocr_text)
        in_memory_ocr.seek(0)
        try:
            xtf_ftp.putfo(in_memory_ocr, '{}/{}/{}.xml'.format(xtf_path, identifier, identifier))
        except OSError:
            pass
